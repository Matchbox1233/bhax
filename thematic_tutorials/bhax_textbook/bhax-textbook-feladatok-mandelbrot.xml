<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Matchbox1233/Mandelbrot/blob/master/1.cpp">https://github.com/Matchbox1233/Mandelbrot/blob/master/1.cpp</link>
        </para>
        <programlisting language = "C++"><![CDATA[Mandelbort halmaz:

    #include <png++/png.hpp>

    #define N 500
    #define M 500
    #define MAXX 0.7
    #define MINX -2.0
    #define MAXY 1.35
    #define MINY -1.35

    void GeneratePNG( int tomb[N][M])
    {
        png::image< png::rgb_pixel > image(N, M);
        for (int x = 0; x < N; x++)
        {
            for (int y = 0; y < M; y++)
            {
                image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
            }
        }
        image.write("kimenet.png");
    }

    struct Komplex
    {
        double re, im;
    };

    int main()
    {
        int tomb[N][M];

        int i, j, k;

        double dx = (MAXX - MINX) / N;
        double dy = (MAXY - MINY) / M;

        struct Komplex C, Z, Zuj;

        int iteracio;

        for (i = 0; i < M; i++)
        {
            for (j = 0; j < N; j++)
            {
                C.re = MINX + j * dx;
                C.im = MAXY - i * dy;

                Z.re = 0;
                Z.im = 0;
                iteracio = 0;

                while(Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255)
                {
                    Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
                    Zuj.im = 2 * Z.re * Z.im + C.im;
                    Z.re = Zuj.re;
                    Z.im = Zuj.im;
                }

                tomb[i][j] = 256 - iteracio;
            }
        }

        GeneratePNG(tomb);

        return 0;
    }
]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>
            A program elsőrészében(void GeneratePNG) a program legenerálja a képet(png). Eltároljuk az "image[x][y]" -ban a kép RGB színeit pixelenként. A "void" végén kiíratjuk a képet.
        </para>
        <para>
            A második rész a Komplex struktúra(struct Komplex). Itt meghatározzuk a komplex számok valós(re), és az immaginárius(im) részét.
        </para>
        <para>
            A harmadik részben(int main) először létrehoznuk egy "int" típusú tömböt(int tomb), és három "int" típusú változót(i,j,k). Meghatározzuk, hogy milyen lépésközzel lépkedjen a komplex számokon(double dx, double dy). Utána létrehozunk "Komplex típusú" C, Z, Zuj  nevű változókat, és egy "int" típus "iteracio" nevű válltozót. 
            A "for" ciklusban a Mandelbrot számítási képlete van megadva, ami ezen a linken megtalálható: <link xlink:href="https://hu.wikipedia.org/wiki/Mandelbrot-halmaz">https://hu.wikipedia.org/wiki/Mandelbrot-halmaz</link>
        </para>
    </section>        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Matchbox1233/Mandelbrot/blob/master/2.cpp">https://github.com/Matchbox1233/Mandelbrot/blob/master/2.cpp</link>
        </para>
        <programlisting language = "C++" ><![CDATA[Mandelbort halmaz std::complex osztállyal:

    #include <png++/png.hpp>
    #include <complex>

    const int N = 500;
    const int M = 500;
    const double MAXX = 0.7;
    const double MINX = -2.0;
    const double MAXY = 1.35;
    const double MINY = -1.35;

    void GeneratePNG(const int tomb[N][M])
    {
        png::image< png::rgb_pixel > image(N, M);
        for (int x = 0; x < N; x++)
        {
            for (int y = 0; y < M; y++)
            {
                image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
            }
        }
        image.write("kimenet.png");
    }

    int main()
    {
        int tomb[N][M];

        double dx = (MAXX - MINX) / N;
        double dy = (MAXY - MINY) / M;

        std::complex<double> C, Z, Zuj;

        int iteracio;

        for (int i = 0; i < M; i++)
        {
            for (int j = 0; j < N; j++)
            {
                C.real (MINX + j * dx);
                C.imag (MAXY - i * dy);

                Z = 0;
                iteracio = 0;

                while(abs(Z) < 2 && iteracio++ < 255)
                {
                    Zuj = Z*Z+C;
                    Z = Zuj;
                }

                tomb[i][j] = 256 - iteracio;
            }
        }

        GeneratePNG(tomb);

        return 0;
    }
]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>
            A program annyiban különbözik az előzőtől, hogy itt nem készítünk előre Komplex struktúrát(struct Komplex), hanem a C++-ba beleépített komplex számokat használjuk, ezt úgy tehetjük meg, hogy az elején "include"-ba belerakjuk a "complex" szót, majd amikor használjuk, akkor csak elkészítjük az "std::complex" osztályt.
        </para>
    </section>

    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Matchbox1233/Mandelbrot/blob/master/3.cpp">https://github.com/Matchbox1233/Mandelbrot/blob/master/3.cpp</link>
        </para>
        <programlisting language = "C++" ><![CDATA[Biomorf:

    #include <iostream>
    #include "png++/png.hpp"
    #include <complex>

    int
    main ( int argc, char *argv[] )
    {

        int szelesseg = 1920;
        int magassag = 1080;
        int iteraciosHatar = 255;
        double xmin = -1.9;
        double xmax = 0.7;
        double ymin = -1.3;
        double ymax = 1.3;
        double reC = .285, imC = 0;
        double R = 10.0;

        if ( argc == 12 )
        {
            szelesseg = atoi ( argv[2] );
            magassag =  atoi ( argv[3] );
            iteraciosHatar =  atoi ( argv[4] );
            xmin = atof ( argv[5] );
            xmax = atof ( argv[6] );
            ymin = atof ( argv[7] );
            ymax = atof ( argv[8] );
            reC = atof ( argv[9] );
            imC = atof ( argv[10] );
            R = atof ( argv[11] );

        }
        else
        {
            std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
            return -1;
        }

        png::image < png::rgb_pixel > kep ( szelesseg, magassag );  

        double dx = ( xmax - xmin ) / szelesseg;   
        double dy = ( ymax - ymin ) / magassag;

        std::complex<double> cc ( reC, imC );

        std::cout << "Szamitas\n";

        
        for ( int y = 0; y < magassag; ++y )
        {

            for ( int x = 0; x < szelesseg; ++x )   
            {

                double reZ = xmin + x * dx;   
                double imZ = ymax - y * dy;
                std::complex<double> z_n ( reZ, imZ );

                int iteracio = 0;
                for (int i=0; i < iteraciosHatar; ++i)  
                {

                    z_n = std::pow(z_n, 3) + cc;
                    //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                    if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                    {
                        iteracio = i;
                        break;
                    }
                }

                kep.set_pixel ( x, y,
                                png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 )); /színek
            }

            int szazalek = ( double ) y / ( double ) magassag * 100.0;
            std::cout << "\r" << szazalek << "%" << std::flush;
        }

        kep.write ( argv[1] );
        std::cout << "\r" << argv[1] << " mentve." << std::endl;  
    }
]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>
            A program működéséhez elször megadjuk a szükséges osztályokat, függvényeket, et jelzi az "#include" szó. Az "int main" -ben először megadjuk a kép méreteit. A program futtatásához meg kell adnunk tizenkét argumentumot, ezt jelzni az "if ( argc == 12 )", ha nincs meg ez a tizenkettő, akkor a program kiírja, hogy hány argumentumot kell beírni, ezt jelzi az "else". Az "else" után eltároljuk a kép adatait a "png::image" változóban. Aztán meghatározzuk a lépésközt az x és az y tengelyeken(double dx, double dy). A lépésköz meghatározás után hasznákuk a komplex osztályt(std::complex). Majd a képernyőre kiírjuk a számítás eredményét. A második "for" ciklusban a pogram lpéked a komplex számokon(double reZ,double imZ). A harmadik "for" ciklusban a program megad egy értéket, ami alapján meghatározz a színeket, azztán ebből a "for" ciklusból ki is lép a "break" parancs segítségével. A "kep.set_pixel" RGB szerint meghatározz a színeket. Folyamatosan figyelhetjük, hogy a program hány százaléknál jár az "int szazalek" segítségével. A prgram végén pedig fájlba kiírjuk az eredményt. 
         </para>                        
    </section>   

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Matchbox1233/Mandelbrot/blob/master/4.cpp">https://github.com/Matchbox1233/Mandelbrot/blob/master/4.cpp</link>
        </para>
        <programlisting language = "C++"><![CDATA[Mandelbort halmaz CUDA megvalósításával:

    #include <png++/image.hpp>
    #include <png++/rgb_pixel.hpp>

    #include <sys/times.h>
    #include <iostream>


    #define MERET 600
    #define ITER_HAT 32000

    __device__ int mandel (int k, int j)
    {
      float a = -2.0, b = .7, c = -1.35, d = 1.35;
      int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

      float dx = (b - a) / szelesseg;
      float dy = (d - c) / magassag;
      float reC, imC, reZ, imZ, ujreZ, ujimZ;
      int iteracio = 0;

      reC = a + k * dx;
      imC = d - j * dy;

      reZ = 0.0;
      imZ = 0.0;
      iteracio = 0;
      
      while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
        {
          ujreZ = reZ * reZ - imZ * imZ + reC;
          ujimZ = 2 * reZ * imZ + imC;
          reZ = ujreZ;
          imZ = ujimZ;

          ++iteracio;

        }

      return iteracio;
    }

    __global__ void mandelkernel (int *kepadat)
    {

      int tj = threadIdx.x;
      int tk = threadIdx.y;

      int j = blockIdx.x * 10 + tj;
      int k = blockIdx.y * 10 + tk;

      kepadat[j + k * MERET] = mandel (j, k);

    }

    void cudamandel (int kepadat[MERET][MERET])
    {

      int *device_kepadat;
      cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));
      
      dim3 grid (MERET / 10, MERET / 10);
      dim3 tgrid (10, 10);
      mandelkernel <<< grid, tgrid >>> (device_kepadat);  
      
      cudaMemcpy (kepadat, device_kepadat,
              MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
      cudaFree (device_kepadat);

    }

    int main (int argc, char *argv[])
    {

      clock_t delta = clock ();
      
      struct tms tmsbuf1, tmsbuf2;
      times (&tmsbuf1);

      if (argc != 2)
        {
          std::cout << "Hasznalat: ./mandelpngc fajlnev";
          return -1;
        }

      int kepadat[MERET][MERET];

      cudamandel (kepadat);

      png::image < png::rgb_pixel > kep (MERET, MERET);

      for (int j = 0; j < MERET; ++j)
        {
          for (int k = 0; k < MERET; ++k)
        {
          kep.set_pixel (k, j,
                 png::rgb_pixel (255 -
                         (255 * kepadat[j][k]) / ITER_HAT,
                         255 -
                         (255 * kepadat[j][k]) / ITER_HAT,
                         255 -
                         (255 * kepadat[j][k]) / ITER_HAT));
        }
        }
      kep.write (argv[1]);

      std::cout << argv[1] << " mentve" << std::endl;

      times (&tmsbuf2);
      std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
        + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

      delta = clock () - delta;
      std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

    }
]]></programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>
            A program első részében(__device__ int mandel (int k, int j)) torténik meg a Mandelbrot halmaz kiszámítása. A "device" függvény csak videokártyáról érhető el, a "global" függvény, pedig elérhetővé teszi a "device"-ot.
        </para>
        <para>
            A második részben(__global__ void mandelkernel (int *kepadat)) a program megnézi, hogy melyik CORE hajtja végre a programot, és ennek az idexét elküldi az első résznek, mert ez alapján számolja ki a halmazt.
        </para>
        <para>
            A harmadik részben(void cudamandel (int kepadat[MERET][MERET])) lefoglalajuk a kártyán a helyet, és találkozunk egy nem tipikus fuggvényhívással, amiben megadjuk, hogy hány blokkot és hány szálat szánunk a programnak. A rész végén felszabadítjuk a pointereket.
        </para>
        <para>
            Az utolsó rész a fő rész(int main). Itt először létrehozunk egy "clock_t delta" nevű változót, ezt arra fogjuk használni, hogy a pogram végén kiírja, hogy mennyi ideig futott. Ha nem jól indítanánk a programot, akkor az figyelmeztet minket. Erre szolgál az "if (argc != 2)", ami azt jelenti, hogy ha a bemeneti argumentum nem kettő, akkor kiírja, ami az "if"-ben van megadva. A "for" ciklusokkal megalkotjuk a képet, az RGB színekkel. A program a futása végén kiírja, hogy mentve, és kiírja a futási időt is.
        </para>
    </section>                     
    
    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteráció bejárta z<subscript>n</subscript> komplex számokat!  
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/Matchbox1233/Mandelbrot/blob/master/5.cpp">https://github.com/Matchbox1233/Mandelbrot/blob/master/5.cpp</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>
            A mandelbrot halmaz számolását a "frakszál" végzi, viszont a rajzolást átadja "frakablak" osztálynak, mindig az éppen kiszámolt sort. A main függvényben példányosítunk, majd a "w.show()"" segítségével kirajzoljuk a halmazt. A nagyítás a "frakablak.cpp-ben" történik. A "mousePressEvent" a nagyítandó terület bal felső sarkát határozza meg. A "mouseMoveEvent" a nagyítandó terület szélességét és magasságát határozza meg. A "mouseReleaseEvent" végzi el a nagyítást.
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Mandelbrot/Zoom_java">https://gitlab.com/fupn26/bhax/tree/master/attention_raising/Mandelbrot/Zoom_java</link> 
        </para>
    </section>   

</chapter>                
